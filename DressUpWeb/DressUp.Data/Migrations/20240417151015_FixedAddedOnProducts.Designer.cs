// <auto-generated />
using System;
using DressUp.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DressUp.Data.Migrations
{
    [DbContext(typeof(DressUpDbContext))]
    [Migration("20240417151015_FixedAddedOnProducts")]
    partial class FixedAddedOnProducts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DressUp.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Address street");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");

                    b.HasComment("Address table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36d433c7-1c34-4a02-b0a5-6b7b4a1b6b7e"),
                            CityId = 3,
                            CountryId = 1,
                            Street = "Asparuhovo Blvd. Narodni Buditeli 2 fl. 2"
                        },
                        new
                        {
                            Id = new Guid("8a0d518b-9d8a-4e80-a68b-5b2f89b14812"),
                            CityId = 4,
                            CountryId = 1,
                            Street = "j.k. Izgrev 147"
                        },
                        new
                        {
                            Id = new Guid("fbd8adbb-9de2-4e63-b8fc-32a01b6ed348"),
                            CityId = 3,
                            CountryId = 1,
                            Street = "Varna, j.k. Vladislavovo Blvd. 3-ti Mart 4"
                        });
                });

            modelBuilder.Entity("DressUp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Extendet Identity user table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dca95dad-ca99-4dd4-b5b1-73b83c6d780e",
                            Email = "admin@softuni.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            Gender = 0,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SOFTUNI.BG",
                            NormalizedUserName = "ADMIN@SOFTUNI.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEFP/91j0oB3MQsnNvZiCD414cRcluUsdsMuMJ8yGg+z2dwj9413r1psHdOdDlmCiiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "078f1394-e303-4e74-9d19-0a9c539b7bd7",
                            TwoFactorEnabled = false,
                            UserName = "admin@softuni.bg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a78b333c-6b34-4f45-802d-7c06420f49c9",
                            Email = "user@softuni.bg",
                            EmailConfirmed = true,
                            FirstName = "User",
                            Gender = 0,
                            LastName = "Userov",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@SOFTUNI.BG",
                            NormalizedUserName = "USER@SOFTUNI.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAENCou3bnHCJY2BpjWN92cIfddnbptRvmTL0H1apCWDjlTYDh/Fq84UExxVaH6naD5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ef1716d-6383-48af-b42e-cf0d4f3a1b31",
                            TwoFactorEnabled = false,
                            UserName = "user@softuni.bg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcf30a7f-8abb-4fda-955c-29daf3afc592",
                            Email = "moderator@softuni.bg",
                            EmailConfirmed = true,
                            FirstName = "Moderator",
                            Gender = 1,
                            LastName = "Moderatorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@SOFTUNI.BG",
                            NormalizedUserName = "MODERATOR@SOFTUNI.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEOOBVVRPY0PUsO8jmOn9rMBMUhcxiyd1tByALwTcJEsh2IQUWdOrUXfqdPwGeaJrXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c9e579e-36b4-464b-bf11-8f26f1d525d9",
                            TwoFactorEnabled = false,
                            UserName = "moderator@softuni.bg"
                        });
                });

            modelBuilder.Entity("DressUp.Data.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasComment("Dress brand");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Reebok"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Under Armour"
                        });
                });

            modelBuilder.Entity("DressUp.Data.Models.BuyedProduct", b =>
                {
                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BuyerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BuyedProducts");
                });

            modelBuilder.Entity("DressUp.Data.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cvc")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("HolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HolderId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("DressUp.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasComment("Dress category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dresses"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Jackets"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Skirts"
                        });
                });

            modelBuilder.Entity("DressUp.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ruse"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Stara Zagora"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pleven"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sliven"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dobrich"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Shumen"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pernik"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Yambol"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Haskovo"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Pazardzhik"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Blagoevgrad"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Veliko Tarnovo"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Vratsa"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Gabrovo"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Asenovgrad"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Kardzhali"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Kyustendil"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Razgrad"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Petrich"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Belogradchik"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Sandanski"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Gorna Oryahovitsa"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Lovech"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Targovishte"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Svilengrad"
                        });
                });

            modelBuilder.Entity("DressUp.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 4,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Russia"
                        });
                });

            modelBuilder.Entity("DressUp.Data.Models.Favorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Favorites");

                    b.HasComment("Favorite products mapping table");
                });

            modelBuilder.Entity("DressUp.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeType")
                        .HasColumnType("int")
                        .HasComment("Dress gender type");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedOn = new DateTime(2024, 4, 15, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 1,
                            CategoryId = 1,
                            Description = "Cotton t-shirt with logo print",
                            Name = "T-Shirt",
                            Price = 15.99m,
                            Quantity = 100,
                            SizeType = 0
                        },
                        new
                        {
                            Id = 2,
                            AddedOn = new DateTime(2024, 4, 16, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 2,
                            CategoryId = 2,
                            Description = "Slim fit denim jeans",
                            Name = "Jeans",
                            Price = 29.99m,
                            Quantity = 50,
                            SizeType = 0
                        },
                        new
                        {
                            Id = 3,
                            AddedOn = new DateTime(2024, 4, 17, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 3,
                            CategoryId = 1,
                            Description = "Formal dress shirt with button-down collar",
                            Name = "Dress Shirt",
                            Price = 24.99m,
                            Quantity = 75,
                            SizeType = 0
                        },
                        new
                        {
                            Id = 4,
                            AddedOn = new DateTime(2024, 4, 13, 14, 20, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 4,
                            CategoryId = 3,
                            Description = "A-line skirt with floral pattern",
                            Name = "Skirt",
                            Price = 19.99m,
                            Quantity = 60,
                            SizeType = 1
                        },
                        new
                        {
                            Id = 5,
                            AddedOn = new DateTime(2024, 4, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 5,
                            CategoryId = 4,
                            Description = "Waterproof jacket with hood",
                            Name = "Jacket",
                            Price = 49.99m,
                            Quantity = 30,
                            SizeType = 0
                        },
                        new
                        {
                            Id = 6,
                            AddedOn = new DateTime(2024, 4, 11, 13, 10, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 1,
                            CategoryId = 1,
                            Description = "Knitted sweater with crew neckline",
                            Name = "Sweater",
                            Price = 34.99m,
                            Quantity = 80,
                            SizeType = 0
                        },
                        new
                        {
                            Id = 7,
                            AddedOn = new DateTime(2024, 4, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 2,
                            CategoryId = 2,
                            Description = "Casual shorts with drawstring waist",
                            Name = "Shorts",
                            Price = 22.99m,
                            Quantity = 45,
                            SizeType = 0
                        },
                        new
                        {
                            Id = 8,
                            AddedOn = new DateTime(2024, 4, 2, 17, 20, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 3,
                            CategoryId = 3,
                            Description = "Maxi dress with spaghetti straps",
                            Name = "Dress",
                            Price = 39.99m,
                            Quantity = 65,
                            SizeType = 1
                        },
                        new
                        {
                            Id = 9,
                            AddedOn = new DateTime(2024, 4, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 4,
                            CategoryId = 1,
                            Description = "Chiffon blouse with ruffle detail",
                            Name = "Blouse",
                            Price = 29.99m,
                            Quantity = 70,
                            SizeType = 1
                        },
                        new
                        {
                            Id = 10,
                            AddedOn = new DateTime(2024, 4, 3, 10, 45, 0, 0, DateTimeKind.Unspecified),
                            BrandId = 5,
                            CategoryId = 4,
                            Description = "Wool blend coat with belt",
                            Name = "Coat",
                            Price = 79.99m,
                            Quantity = 25,
                            SizeType = 0
                        });
                });

            modelBuilder.Entity("DressUp.Data.Models.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductsReviews");
                });

            modelBuilder.Entity("DressUp.Data.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ClosingTime")
                        .HasColumnType("datetime2")
                        .HasComment("Time when store close");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Contact information with store");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<DateTime>("OpeningTime")
                        .HasColumnType("datetime2")
                        .HasComment("Time when store open");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Stores");

                    b.HasComment("Phisical shop/store");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = new Guid("36d433c7-1c34-4a02-b0a5-6b7b4a1b6b7e"),
                            ClosingTime = new DateTime(2024, 4, 17, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactInfo = "123-456-7890",
                            ImageUrl = "~/DressPics/Stores/FIola.jpg",
                            Name = "Fiolla Asparuhovo",
                            OpeningTime = new DateTime(2024, 4, 17, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AddressId = new Guid("8a0d518b-9d8a-4e80-a68b-5b2f89b14812"),
                            ClosingTime = new DateTime(2024, 4, 17, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactInfo = "987-654-3210",
                            ImageUrl = "~/DressPics/Stores/Fiola2.webp",
                            Name = "Fiolla Izgrev",
                            OpeningTime = new DateTime(2024, 4, 17, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AddressId = new Guid("fbd8adbb-9de2-4e63-b8fc-32a01b6ed348"),
                            ClosingTime = new DateTime(2024, 4, 17, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactInfo = "555-123-4567",
                            ImageUrl = "~/DressPics/Stores/Fiola3.webp",
                            Name = "Fiolla Vladislavovo",
                            OpeningTime = new DateTime(2024, 4, 17, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DressUp.Data.Models.StoreProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoresProducts");

                    b.HasComment("Mapping table with Stores and Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Image link");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasComment("Image link for Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a5abf8f-96e2-4c7e-8a7d-c9b9dc5d6e4b"),
                            ImageUrl = "~/DressPics/Men/T-Shirt1.webp",
                            ProductId = 1
                        },
                        new
                        {
                            Id = new Guid("cd0a6f0f-ea28-4c0c-88b5-259ba5a90bb4"),
                            ImageUrl = "~/DressPics/Men/T-Shirt2.webp",
                            ProductId = 1
                        },
                        new
                        {
                            Id = new Guid("e2f4d405-4b1a-4876-8a0a-40ef482e5e62"),
                            ImageUrl = "~/DressPics/Men/Jeans1.webp",
                            ProductId = 2
                        },
                        new
                        {
                            Id = new Guid("aafbe7a9-b291-4b88-aa0c-1bb496b56f7d"),
                            ImageUrl = "~/DressPics/Men/Jeans2.webp",
                            ProductId = 2
                        },
                        new
                        {
                            Id = new Guid("3b4e89c6-77a0-4929-a94b-0d2f60d24e22"),
                            ImageUrl = "~/DressPics/Men/DressShirt1.webp",
                            ProductId = 3
                        },
                        new
                        {
                            Id = new Guid("59aa0191-12e4-4e47-bb80-22891cd8e52e"),
                            ImageUrl = "~/DressPics/Men/DressShirt2.webp",
                            ProductId = 3
                        },
                        new
                        {
                            Id = new Guid("be86c2f8-8e12-4c29-b17c-2e3126e2e1ff"),
                            ImageUrl = "~/DressPics/Women/Skirt1.webp",
                            ProductId = 4
                        },
                        new
                        {
                            Id = new Guid("47c43f51-4784-41d4-b524-c2bf2f4c70d4"),
                            ImageUrl = "~/DressPics/Women/Skirt2.webp",
                            ProductId = 4
                        },
                        new
                        {
                            Id = new Guid("727d7f6f-8c50-4c77-8660-9b6e8e8aae9f"),
                            ImageUrl = "~/DressPics/Men/Jacket1.webp",
                            ProductId = 5
                        },
                        new
                        {
                            Id = new Guid("4f4bfb79-27b1-4c98-ba8c-4f413aa6dc3e"),
                            ImageUrl = "~/DressPics/Men/Jacket2.webp",
                            ProductId = 5
                        },
                        new
                        {
                            Id = new Guid("60ab5a1e-0294-4ba7-a1bc-2f0a67617453"),
                            ImageUrl = "~/DressPics/Men/Sweater1.webp",
                            ProductId = 6
                        },
                        new
                        {
                            Id = new Guid("e7b94c53-0558-4aa2-8f1e-2c70ac10d69e"),
                            ImageUrl = "~/DressPics/Men/Sweater2.webp",
                            ProductId = 6
                        },
                        new
                        {
                            Id = new Guid("7ac4482c-3685-4b80-8373-79e24be5a39d"),
                            ImageUrl = "~/DressPics/Men/Shorts1.webp",
                            ProductId = 7
                        },
                        new
                        {
                            Id = new Guid("2e36a7a7-40b1-4ef6-8ee2-1df526f5fbad"),
                            ImageUrl = "~/DressPics/Men/Shorts2.webp",
                            ProductId = 7
                        },
                        new
                        {
                            Id = new Guid("0fc8b972-77b5-4ef4-8eb1-23d96a4d6d84"),
                            ImageUrl = "~/DressPics/Women/Dress1.webp",
                            ProductId = 8
                        },
                        new
                        {
                            Id = new Guid("1a1a865e-5313-42c6-af4a-dc40e0e63fa4"),
                            ImageUrl = "~/DressPics/Women/Dress2.webp",
                            ProductId = 8
                        },
                        new
                        {
                            Id = new Guid("ab5b3b6f-cdc8-4b44-a183-6956a5fa99e5"),
                            ImageUrl = "~/DressPics/Women/Blouse1.webp",
                            ProductId = 9
                        },
                        new
                        {
                            Id = new Guid("72d4b89a-290a-4f3e-8e06-1bde60a8a929"),
                            ImageUrl = "~/DressPics/Women/Blouse2.webp",
                            ProductId = 9
                        },
                        new
                        {
                            Id = new Guid("f6517416-05e0-4e2e-bc9e-f45c8d498b06"),
                            ImageUrl = "~/DressPics/Men/Coat1.webp",
                            ProductId = 10
                        },
                        new
                        {
                            Id = new Guid("87642b02-5a77-4462-a01d-27f445c067a6"),
                            ImageUrl = "~/DressPics/Men/Coat2.webp",
                            ProductId = 10
                        });
                });

            modelBuilder.Entity("DressUp.Data.Models.Address", b =>
                {
                    b.HasOne("DressUp.Data.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DressUp.Data.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DressUp.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("DressUp.Data.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DressUp.Data.Models.BuyedProduct", b =>
                {
                    b.HasOne("DressUp.Data.Models.ApplicationUser", "Buyer")
                        .WithMany("BuyedProducts")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DressUp.Data.Models.Product", "Product")
                        .WithMany("BuyedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DressUp.Data.Models.Card", b =>
                {
                    b.HasOne("DressUp.Data.Models.ApplicationUser", "Holder")
                        .WithMany("Cards")
                        .HasForeignKey("HolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holder");
                });

            modelBuilder.Entity("DressUp.Data.Models.Favorite", b =>
                {
                    b.HasOne("DressUp.Data.Models.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DressUp.Data.Models.ApplicationUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DressUp.Data.Models.Product", b =>
                {
                    b.HasOne("DressUp.Data.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DressUp.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DressUp.Data.Models.ProductReview", b =>
                {
                    b.HasOne("DressUp.Data.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DressUp.Data.Models.ApplicationUser", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DressUp.Data.Models.Store", b =>
                {
                    b.HasOne("DressUp.Data.Models.Address", "Address")
                        .WithMany("Stores")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DressUp.Data.Models.StoreProduct", b =>
                {
                    b.HasOne("DressUp.Data.Models.Product", "Product")
                        .WithMany("StoresProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DressUp.Data.Models.Store", "Store")
                        .WithMany("StoresProducts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DressUp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DressUp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DressUp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DressUp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductImage", b =>
                {
                    b.HasOne("DressUp.Data.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DressUp.Data.Models.Address", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DressUp.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("BuyedProducts");

                    b.Navigation("Cards");

                    b.Navigation("Favorites");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("DressUp.Data.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DressUp.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DressUp.Data.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DressUp.Data.Models.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DressUp.Data.Models.Product", b =>
                {
                    b.Navigation("BuyedProducts");

                    b.Navigation("Favorites");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductReviews");

                    b.Navigation("StoresProducts");
                });

            modelBuilder.Entity("DressUp.Data.Models.Store", b =>
                {
                    b.Navigation("StoresProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
